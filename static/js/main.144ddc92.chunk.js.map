{"version":3,"sources":["theme.js","ui.js","App.js","index.js"],"names":["colorsMap","red","green","yellow","blue","GlobalStyle","createGlobalStyle","GlobalWrapper","styled","div","Rectangle","attrs","style","height","backgroundColor","CollectionWrapper","props","color","Button","disabled","Flex","markReplaced","arr","i","map","item","index","markSorted","generateRandomNumber","max","min","Math","floor","random","CollectionView","collection","R","number","preparedCollection","length","generatedPath","proccesArr","j","colorReplaced","colorSorted","push","unshift","generateCollectionSortPath","collectionLength","maxNumber","generateCollection","incArr","App","interval","useRef","stopCounter","clearInterval","current","useState","setIndex","prepared","setPrepare","on","setOn","useEffect","setInterval","prevState","isDisabledAction","arg","includes","Fragment","onClick","defineColor","memo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.144ddc92.chunk.js","sourcesContent":["export const colorsMap = {\n  red: 'rgb(223, 65, 60)',\n  green: 'rgb(71, 170, 80)',\n  yellow: 'rgb(212, 69, 33)',\n  blue: 'rgb(90, 127, 244)',\n}\n","import styled, { createGlobalStyle } from \"styled-components\"\nimport { colorsMap } from \"./theme\"\n\n\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n      box-sizing: border-box;\n  }\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n  body {\n    padding: 0;\n    margin: 0;\n  }\n`\n\n\nexport const GlobalWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background: #fffccc;\n  position: relative;\n  display: flex;\n  justify-content: space-evenly;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const Rectangle = styled.div.attrs({\n  style: ({ height, backgroundColor }) => ({\n    height,\n    backgroundColor: colorsMap[backgroundColor]\n  })\n})`\n  flex-grow: 1;\n  margin-right: 1px;\n  margin-left: 1px;\n`\nexport const CollectionWrapper = styled.div`\n  border-color: ${props => colorsMap[props.color]};\n  border-width: 3px;\n  border-style: solid;\n  margin-bottom: 50px;\n  cursor: pointer;\n  display: flex;\n  width: 50%;\n  min-width: 800px;\n  height: 300px;\n  align-items: flex-end;\n  \n`\n\nexport const Button = styled.div`\n  font-size: 20px;\n  background-color: ${props => {\n    if (props.red) return colorsMap.red\n    if (props.yellow) return colorsMap.yellow\n    if (props.green) return colorsMap.green\n    return colorsMap.blue\n  }};\n  opacity: ${props => props.disabled && 0.4};\n  color: white;\n  cursor: pointer;\n  text-transform: uppercase;\n  padding: 10px 20px;\n`\nexport const Flex = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 324px;\n  justify-content: space-between\n`","import * as R from 'ramda';\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport { GlobalWrapper, GlobalStyle, Rectangle, CollectionWrapper, Button, Flex } from './ui';\nimport { colorsMap } from \"./theme\"\n\nconst markReplaced = (arr, i) => arr.map((item, index) => ({ ...item, color: (index === i) || (index === i + 1) ? colorsMap.blue : colorsMap.green }));\n\nconst markSorted = (arr, i) => arr.map((item, index) => index >= i ? { ...item, color: colorsMap.red } : item);\n\nconst markAllSorted = (arr) => arr.map((incArr, index) => {\n  if (index === R.length(arr) - 1) {\n    incArr[0].color = colorsMap.red\n    incArr[1].color = colorsMap.red\n  }\n  return incArr\n})\n\nconst generateCollectionSortPath = (collection) => {\n  const arr = [...collection]\n  const proccesArr = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = 0; j < arr.length - 1 - i; j++) {\n\n      if (arr[j].number > arr[j + 1].number) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\n      }\n      const colorReplaced = markReplaced(arr, j)\n      const colorSorted = markSorted(colorReplaced, R.length(colorReplaced) - i)\n      proccesArr.push(colorSorted);\n    }\n  }\n  proccesArr.unshift(markReplaced(collection))\n  return proccesArr;\n};\n\nconst generateRandomNumber = (max = 100, min = 10) => Math.floor(Math.random() * (max - min)) + min;\n\nconst generateCollection = (collectionLength, maxNumber) => {\n  const collection = []\n  for (let i = 0; i < collectionLength; i++) {\n    collection.push({\n      number: generateRandomNumber(maxNumber),\n      color: colorsMap.green,\n    })\n  }\n  return collection;\n}\n\nfunction CollectionView({ collection }) {\n  return R.length(collection) && collection.map((item, i) => (\n    <Rectangle key={i} style={{\n      height: item.number,\n      backgroundColor: item.color\n    }} />\n  ))\n}\n\nconst preparedCollection = (length, max) => {\n  const collection = generateCollection(length, max)\n  const generatedPath = generateCollectionSortPath(collection)\n  const marked = markAllSorted(generatedPath)\n  return marked\n}\n\nconst length = 30;\nconst maxHeight = 250;\nconst initSpeed = 30\n\n\n\nfunction App() {\n  const interval = useRef(null)\n  const stopCounter = () => clearInterval(interval.current)\n  const [index, setIndex] = useState(0)\n  const [prepared, setPrepare] = useState(() => preparedCollection(length, maxHeight));\n  const [on, setOn] = useState('off');\n\n\n\n  useEffect(() => {\n    if (index >= R.length(prepared) - 1) {\n      stopCounter()\n      setOn('sorted')\n    }\n  }, [index, prepared])\n\n  useEffect(() => {\n    switch (on) {\n      case 'play': {\n        interval.current = setInterval(() => {\n          setIndex(prevState => prevState + 1)\n        }, initSpeed);\n        break;\n      }\n      default: {\n        stopCounter();\n        break;\n      }\n    }\n  }, [on])\n\n\n\n  const generateHandler = () => {\n    if (isDisabledAction('sorted', 'off')) {\n      setPrepare(preparedCollection(length, maxHeight))\n      setIndex(0)\n      setOn('off')\n    }\n  }\n\n  const pauseHandler = () => {\n    if (isDisabledAction('play')) setOn('pause')\n  }\n\n  const sortHandler = () => {\n    if (isDisabledAction('pause', 'off')) setOn('play')\n  }\n\n  const resetHandler = () => {\n    if (isDisabledAction('off')) return\n    setPrepare(preparedCollection(length, maxHeight))\n    setIndex(0)\n    setOn('off')\n  }\n\n  const isDisabledAction = (...arg) => {\n    return arg.includes(on)\n  }\n\n  const defineColor = () => {\n    switch (on) {\n      case 'play': return 'red';\n      case 'sorted': return 'red';\n      case 'pause': return 'blue';\n      default: return 'green'\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <GlobalWrapper>\n        <Button green disabled={isDisabledAction('play', 'pause')} onClick={generateHandler}>Generate new collection</Button>\n        <Flex>\n          <Button red disabled={isDisabledAction('play', 'sorted')} onClick={sortHandler}>Play</Button>\n          <Button disabled={isDisabledAction('off', 'pause', 'sorted')} onClick={pauseHandler}>Pause</Button>\n          <Button yellow disabled={isDisabledAction('off', 'sorted')} onClick={resetHandler}>Reset</Button>\n        </Flex>\n        <CollectionWrapper color={defineColor()}>\n          <CollectionView collection={prepared[index]} />\n        </CollectionWrapper>\n      </GlobalWrapper>\n\n    </React.Fragment>\n  );\n}\n\nexport default memo(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n"],"sourceRoot":""}